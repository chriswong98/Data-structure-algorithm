/*****************************************
 * (This comment block is added by the Judge System)
 * Submission ID: 113161
 * Submitted at:  2020-03-05 02:14:22
 *
 * User ID:       779
 * Username:      55744759
 * Problem ID:    251
 * Problem Name:  How Many Islands? (Japan Local 2009)
 */

#include <iostream>
#include <string.h>
using namespace std;

int table[51][51] = { 0 };
bool visited[51][51] = { 0 };


void dfs(int r, int c) {



	visited[r][c] = true;

	

	if (table[r][c] == 1 && r == 0 && c==0) {

		
		if (visited[r][c + 1] == false && table[r][c + 1] == 1) {
			dfs(r, c + 1);
		}		
		

		if (visited[r + 1][c] == false && table[r + 1][c] == 1) {
			dfs(r+1, c);
		}

		if (visited[r + 1][c+1] == false && table[r + 1][c+1] == 1) {
			dfs(r + 1, c+1);
		}
	}

	if (table[r][c] == 1 && r == 0 && c != 0) {
		if (visited[r][c -1] == false && table[r][c - 1] == 1) {
			dfs(r, c - 1);
		}

		if (visited[r][c + 1] == false && table[r][c + 1] == 1) {
			dfs(r, c + 1);
		}

		if (visited[r+1][c - 1] == false && table[r+1][c - 1] == 1) {
			dfs(r+1, c - 1);
		}

		if (visited[r + 1][c] == false && table[r + 1][c] == 1) {
			dfs(r + 1, c);
		}

		if (visited[r + 1][c+1] == false && table[r + 1][c+1] == 1) {
			dfs(r + 1, c+1);
		}
	}

	if (table[r][c] == 1 && r != 0 && c == 0) {

		if (visited[r -1][c ] == false && table[r - 1][c] == 1) {
			dfs(r - 1, c);
		}

		if (visited[r - 1][c+1] == false && table[r - 1][c+1] == 1) {
			dfs(r - 1, c+1);
		}

		if (visited[r][c + 1] == false && table[r][c + 1] == 1) {
			dfs(r, c + 1);
		}

		if (visited[r + 1][c] == false && table[r + 1][c] == 1) {
			dfs(r + 1, c);
		}

		if (visited[r + 1][c + 1] == false && table[r + 1][c + 1] == 1) {
			dfs(r + 1, c + 1);
		}

	}

	if (table[r][c] == 1 && r != 0 && c != 0) {
		if (visited[r - 1][c-1] == false && table[r - 1][c-1] == 1) {
			dfs(r - 1, c-1);
		}
		if (visited[r - 1][c] == false && table[r - 1][c] == 1) {
			dfs(r - 1, c);
		}
		if (visited[r - 1][c+1] == false && table[r - 1][c+1] == 1) {
			dfs(r - 1, c+1);
		}
		if (visited[r][c - 1] == false && table[r][c - 1] == 1) {
			dfs(r, c - 1);
		}
		if (visited[r][c + 1] == false && table[r][c + 1] == 1) {
			dfs(r, c + 1);
		}
		if (visited[r+1][c - 1] == false && table[r+1][c - 1] == 1) {
			dfs(r+1, c - 1);
		}
		if (visited[r + 1][c ] == false && table[r + 1][c] == 1) {
			dfs(r + 1, c);
		}
		if (visited[r + 1][c + 1] == false && table[r + 1][c + 1] == 1) {
			dfs(r + 1, c + 1);
		}
	}

}



int main() {

	int w, h;
	int count = 0;
	cin >> w >> h;
	while (w!=0 && h!=0) {

		for (int i = 0; i < h; i++) {

			for (int j = 0; j < w; j++) {
				cin >> table[i][j];
			}

		}

		for (int i = 0; i < h; i++) {

			for (int j = 0; j < w; j++) {
				if (table[i][j] == 1 && visited[i][j] == 0)
				{
					count++;
					dfs(i,j);
				}
			}

		}

		
		cout << count << endl;
		count = 0;
		memset(table, 0, sizeof(table));
		memset(visited, 0, sizeof(visited));
		cin >> w >> h;
	}
}
