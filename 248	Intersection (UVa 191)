/*****************************************
 * (This comment block is added by the Judge System)
 * Submission ID: 124687
 * Submitted at:  2020-05-13 19:59:34
 *
 * User ID:       779
 * Username:      55744759
 * Problem ID:    248
 * Problem Name:  Intersection (UVa 191)
 */

#include<iostream>
#include <algorithm>
using namespace std;

struct Point {

	double x, y;


};

bool onSegment(Point p, Point q, Point r)
{
	if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
		q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
		return true;

	return false;
}

// To find orientation of ordered triplet (p, q, r). 
// The function returns following values 
// 0 --> p, q and r are colinear 
// 1 --> Clockwise 
// 2 --> Counterclockwise 
int orientation(Point p, Point q, Point r)
{
	// for details of below formula. 
	int val = (q.y - p.y) * (r.x - q.x) -
		(q.x - p.x) * (r.y - q.y);

	if (val == 0) return 0;  // colinear 

	return (val > 0) ? 1 : 2; // clock or counterclock wise 
}

// The main function that returns true if line segment 'p1q1' 
// and 'p2q2' intersect. 
bool doIntersect(Point p1, Point q1, Point p2, Point q2)
{
	// Find the four orientations needed for general and 
	// special cases 
	int o1 = orientation(p1, q1, p2);
	int o2 = orientation(p1, q1, q2);
	int o3 = orientation(p2, q2, p1);
	int o4 = orientation(p2, q2, q1);

	// General case 
	if (o1 != o2 && o3 != o4)
		return true;

	// Special Cases 
	// p1, q1 and p2 are colinear and p2 lies on segment p1q1 
	if (o1 == 0 && onSegment(p1, p2, q1)) return true;

	// p1, q1 and q2 are colinear and q2 lies on segment p1q1 
	if (o2 == 0 && onSegment(p1, q2, q1)) return true;

	// p2, q2 and p1 are colinear and p1 lies on segment p2q2 
	if (o3 == 0 && onSegment(p2, p1, q2)) return true;

	// p2, q2 and q1 are colinear and q1 lies on segment p2q2 
	if (o4 == 0 && onSegment(p2, q1, q2)) return true;

	return false; // Doesn't fall in any of the above cases 
}

bool inside(Point p, Point topLeft, Point bottomRight)
{
	if (p.x >= topLeft.x && p.y <= topLeft.y && p.x <= bottomRight.x && p.y >= bottomRight.y) {
		return true;
	}
	else {
		return false;
	}
}


int main() {

	int n;

	cin >> n;


	while (n--) {

		double xstart, ystart, xend, yend, xleft, ytop, xright, ybottom;


		cin >> xstart >> ystart >> xend >> yend >> xleft >> ytop >> xright >> ybottom;

		Point lineP1;

		lineP1.x = xstart;
		lineP1.y = ystart;

		Point lineP2;

		lineP2.x = xend;
		lineP2.y = yend;

		Point rTopLeft;
		Point rBottomRight;

		rTopLeft.x = min(xleft,xright);
		rTopLeft.y = max(ytop,ybottom);

		rBottomRight.x = max(xleft, xright);
		rBottomRight.y = min(ytop, ybottom);

		Point rTopDown;
		Point rTopRight;

		rTopDown.x = rTopLeft.x;
		rTopDown.y = rBottomRight.y;

		rTopRight.x = rBottomRight.x;
		rTopRight.y = rTopLeft.y;

		bool b1 = doIntersect(lineP1, lineP2, rTopLeft, rTopDown);
		bool b2 = doIntersect(lineP1, lineP2, rTopLeft, rTopRight);

		bool b3 = doIntersect(lineP1, lineP2, rTopRight, rBottomRight);
		bool b4 = doIntersect(lineP1, lineP2, rTopDown, rBottomRight);

		bool b5 = inside(lineP1, rTopLeft, rBottomRight);

		bool b6 = inside(lineP2, rTopLeft, rBottomRight);

		if (b1 || b2 || b3 || b4 || b5||b6) {
			cout << "T" << endl;
		}
		else {
			cout << "F" << endl;
		}
	}

}
