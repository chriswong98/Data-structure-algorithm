/*****************************************
 * (This comment block is added by the Judge System)
 * Submission ID: 100576
 * Submitted at:  2019-12-10 03:26:06
 *
 * User ID:       779
 * Username:      55744759
 * Problem ID:    142
 * Problem Name:  FRIENDS (UVa 10608)
 */

#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;

const int MAX_CITIZEN = 30005;

int findRoot(int group[MAX_CITIZEN], int x) {
	if (group[x] == x) return x;
	return group[x] = findRoot(group, group[x]);
}

void unionGroup(int group[MAX_CITIZEN], int count[MAX_CITIZEN], int A, int B) {
	int rootA = findRoot(group, A);
	int rootB = findRoot(group, B);

	if (rootA != rootB) {
		group[rootB] = rootA;
		count[rootA] += count[rootB];
	}
}


int main() {
	int testcase;
	scanf("%d", &testcase);
	for (int caseCount = 0; caseCount < testcase; ++caseCount) {
		int N, M;
		scanf("%d%d", &N, &M);

		int group[MAX_CITIZEN], count[MAX_CITIZEN];
		for (int i = 1; i <= N; ++i) {
			group[i] = i;
			count[i] = 1;
		}

		for (int i = 0; i < M; ++i) {
			int A, B;
			scanf("%d%d", &A, &B);

			unionGroup(group, count, A, B);
		}

		int maxCount = 0;
		for (int i = 1; i <= N; ++i) {
			maxCount = max(maxCount, count[i]);
		}

		printf("%d\n", maxCount);
	}
	return 0;
}
