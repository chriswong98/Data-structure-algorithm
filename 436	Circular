/*****************************************
 * (This comment block is added by the Judge System)
 * Submission ID: 123788
 * Submitted at:  2020-05-11 22:56:45
 *
 * User ID:       779
 * Username:      55744759
 * Problem ID:    436
 * Problem Name:  Circular
 */

#include <iostream>
#include <vector>
#include <string>
#include<string.h>
using namespace std;

//vector<int> primes;
vector<int> circulars;
bool prime[1000001];

bool checkCircular(int n) {

	int length = to_string(n).length();

	string s = to_string(n);
	for (int i = 0; i < length; i++) {

		string tmp = s.substr(i, length - i);

		string tmp2 = s.substr(0, i);

		tmp += tmp2;



		if (!prime[stoi(tmp)]) {
			return false;
		}

	}
	return true;
}

void SieveOfEratosthenes()
{
	// Create a boolean array "prime[0..n]" and initialize 
	// all entries it as true. A value in prime[i] will 
	// finally be false if i is Not a prime, else true. 
	memset(prime, true, sizeof(prime));

	for (int p = 2; p*p <= 1000000; p++)
	{
		// If prime[p] is not changed, then it is a prime 
		if (prime[p] == true)
		{
			//primes.push_back(p);
			// Update all multiples of p greater than or  
			// equal to the square of it 
			// numbers which are multiple of p and are 
			// less than p^2 are already been marked.  
			for (int i = p * p; i <= 1000000; i += p)
				prime[i] = false;
		}
	}
	for (int p = 101; p <= 1000000; p++) {
		if (prime[p]) {
			//cout << p << " ";
			if (checkCircular(p)) {
				circulars.push_back(p);
			//	cout << p << " ";
			}
		}
	}
}



/*void checkAllCirculars() {

	for (int i = 0; i < primes.size(); i++) {

		int prime = primes[i];

		if (checkCircular(prime)) {
			cout << prime << endl;
			circulars.push_back(prime);
		}

	}

}*/

int main() {

	SieveOfEratosthenes();
	//checkAllCirculars();
	int i, j;
	//cout << checkCircular(199935) <<"&" << endl;
	while (cin >> i && i!=-1) {
		cin >> j;
		int count = 0;

		for (int k = 0; k < circulars.size(); k++) {
			if (circulars[k] >= i && circulars[k] <= j) {
				count++;
			}
		}

		if (count == 0) {
			cout << "No Circular Primes." << endl;
		}
		else if(count == 1) {
			cout << "1 Circular Prime." << endl;
		}
		else {
			cout << count  << " Circular Primes." << endl;
		}
	}


}
