/*****************************************
 * (This comment block is added by the Judge System)
 * Submission ID: 124969
 * Submitted at:  2020-05-14 01:18:19
 *
 * User ID:       779
 * Username:      55744759
 * Problem ID:    209
 * Problem Name:  Isolated Segments (UVa 11343)
 */

#include<iostream>
#include<algorithm>
using namespace std;

struct Point {

	int x;
	int y;
};

struct Segment {

	Point start;
	Point end;

} Segments[101];

bool onSegment(Point p, Point q, Point r)
{
	if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
		q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
		return true;

	return false;
}

// To find orientation of ordered triplet (p, q, r). 
// The function returns following values 
// 0 --> p, q and r are colinear 
// 1 --> Clockwise 
// 2 --> Counterclockwise 
int orientation(Point p, Point q, Point r)
{
	// for details of below formula. 
	int val = (q.y - p.y) * (r.x - q.x) -
		(q.x - p.x) * (r.y - q.y);

	if (val == 0) return 0;  // colinear 

	return (val > 0) ? 1 : 2; // clock or counterclock wise 
}

// The main function that returns true if line segment 'p1q1' 
// and 'p2q2' intersect. 
bool doIntersect(Point p1, Point q1, Point p2, Point q2)
{
	// Find the four orientations needed for general and 
	// special cases 
	int o1 = orientation(p1, q1, p2);
	int o2 = orientation(p1, q1, q2);
	int o3 = orientation(p2, q2, p1);
	int o4 = orientation(p2, q2, q1);

	// General case 
	if (o1 != o2 && o3 != o4)
		return true;

	// Special Cases 
	// p1, q1 and p2 are colinear and p2 lies on segment p1q1 
	if (o1 == 0 && onSegment(p1, p2, q1)) return true;

	// p1, q1 and q2 are colinear and q2 lies on segment p1q1 
	if (o2 == 0 && onSegment(p1, q2, q1)) return true;

	// p2, q2 and p1 are colinear and p1 lies on segment p2q2 
	if (o3 == 0 && onSegment(p2, p1, q2)) return true;

	// p2, q2 and q1 are colinear and q1 lies on segment p2q2 
	if (o4 == 0 && onSegment(p2, q1, q2)) return true;

	return false; // Doesn't fall in any of the above cases 
}
int main() {


	int N;

	cin >> N;

	while (N--) {

		int M;

		cin >> M;
		int count = 0;
		for (int i = 0; i < M; i++) {
			int startX, startY, endX, endY;

			cin >> startX >> startY >> endX >> endY;

			Point start;
			start.x = startX;
			start.y = startY;
			Point end;
			end.x = endX;
			end.y = endY;

			Segment s;
			s.start = start;
			s.end = end;

			Segments[count++] = s;
		}

		int isolatedCount = 0;
		for (int i = 0; i < M; i++) {
			bool checkIso = true;
			Segment s = Segments[i];
			for (int j = 0; j < M; j++) {

				if (i == j)
					continue;

				Segment s2 = Segments[j];

				if (doIntersect(s.start, s.end, s2.start, s2.end)) {
					checkIso = false;
					break;
				}

			}

			if (checkIso)
				isolatedCount++;
		}
		cout << isolatedCount << endl;

	}


}
