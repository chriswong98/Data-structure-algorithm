 /*****************************************
 * (This comment block is added by the Judge System)
 * Submission ID: 110099
 * Submitted at:  2020-02-06 23:04:10
 *
 * User ID:       779
 * Username:      55744759
 * Problem ID:    22
 * Problem Name:  Prime Path
 */

#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

bool prime[10001];
void SieveOfEratosthenes()
{
	// Create a boolean array "prime[0..n]" and initialize 
	// all entries it as true. A value in prime[i] will 
	// finally be false if i is Not a prime, else true. 
	memset(prime, true, sizeof(prime));

	for (int p = 2; p*p <= 10000; p++)
	{
		// If prime[p] is not changed, then it is a prime 
		if (prime[p] == true)
		{
			// Update all multiples of p greater than or  
			// equal to the square of it 
			// numbers which are multiple of p and are 
			// less than p^2 are already been marked.  
			for (int i = p * p; i <= 10000; i += p)
				prime[i] = false;
		}
	}
}

struct Prime
{
	int cost;
	int Number;
};


bool visited[10001] = { 0 };
int BFS(int start , int end) {

	queue<Prime> q;

	Prime p;
	p.cost = 0;
	p.Number = start;

	q.push(p);

	visited[start] = true;
	while (!q.empty()) {

		Prime tmp = q.front();
		q.pop();

		int currentCost = tmp.cost;

		if (tmp.Number == end) {
			return currentCost;
		}

		for (int i = 1; i <= 9; i++) {

			int num = tmp.Number % 1000 + i * 1000;

			if (!visited[num] && prime[num]) {
				Prime newP;
				newP.cost = currentCost + 1;
				newP.Number = num;
				visited[num] = true;
				q.push(newP);
			}

		}

		for (int i = 0; i <= 9; i++) {

			int num = tmp.Number % 100 + tmp.Number / 1000*1000 + i*100;

			if (!visited[num] && prime[num]) {
				Prime newP;
				newP.cost = currentCost + 1;
				newP.Number = num;
				visited[num] = true;
				q.push(newP);
			}

		}

		for (int i = 0; i <= 9; i++) {

			int num = tmp.Number - (tmp.Number % 100) + tmp.Number % 10 + 10 * i;

			if (!visited[num] && prime[num]) {
				Prime newP;
				newP.cost = currentCost + 1;
				newP.Number = num;
				visited[num] = true;
				q.push(newP);
			}

		}

		for (int i = 0; i <= 9; i++) {

			int num = tmp.Number - tmp.Number%10 + i;

			if (!visited[num] && prime[num]) {
				Prime newP;
				newP.cost = currentCost + 1;
				newP.Number = num;
				visited[num] = true;
				q.push(newP);
			}

		}

	}

	return -1;
}


int main() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	int T;

	cin >> T;
	SieveOfEratosthenes();
	while (T--) {


		int start, end;

		cin >> start >> end;

		int minCost = BFS(start, end);

		if (minCost != -1)
			cout << minCost << endl;
		else
			cout << "Impossible" << endl;
		memset(visited, false, sizeof(visited));
	}

}
